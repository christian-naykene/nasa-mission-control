declare module '@arwes/theme/createAppTheme/createAppTheme' {
  import type { PartialDeep } from '@arwes/tools';
  import type { ThemeCreatorStructure, ThemeSettingsUnit, ThemeSettingsColor, ThemeSettingsStyle, ThemeUnit, ThemeColor, ThemeStyle, ThemeSettingsMultiplier, ThemeMultiplier } from '@arwes/theme/types';
  interface AppThemeSettingsPalette {
      main: ThemeSettingsColor;
      text: ThemeSettingsColor;
      bg: ThemeSettingsColor;
      ol: ThemeSettingsColor;
      deco: ThemeSettingsColor;
  }
  interface AppThemeSettingsColors {
      primary: AppThemeSettingsPalette;
      secondary: AppThemeSettingsPalette;
      success: AppThemeSettingsPalette;
      info: AppThemeSettingsPalette;
      warning: AppThemeSettingsPalette;
      error: AppThemeSettingsPalette;
  }
  interface AppThemeSettingsHues {
      primary: number;
      secondary: number;
      success: number;
      info: number;
      warning: number;
      error: number;
  }
  interface AppThemeSettings {
      dark: boolean;
      space: ThemeSettingsUnit;
      spaceN: ThemeSettingsMultiplier;
      hues: AppThemeSettingsHues;
      colors: AppThemeSettingsColors;
      fontFamilies: {
          title: string;
          body: string;
          cta: string;
          input: string;
          code: string;
      };
      typography: {
          title: ThemeSettingsStyle;
          body: ThemeSettingsStyle;
          cta: ThemeSettingsStyle;
          input: ThemeSettingsStyle;
          code: ThemeSettingsStyle;
      };
      transitions: {
          duration: ThemeSettingsUnit;
          durationN: ThemeSettingsMultiplier;
      };
  }
  interface AppThemePalette {
      main: ThemeColor;
      text: ThemeColor;
      bg: ThemeColor;
      ol: ThemeColor;
      deco: ThemeColor;
  }
  interface AppThemeColors {
      primary: AppThemePalette;
      secondary: AppThemePalette;
      success: AppThemePalette;
      info: AppThemePalette;
      warning: AppThemePalette;
      error: AppThemePalette;
  }
  type AppThemeHues = AppThemeSettingsHues;
  interface AppTheme {
      dark: boolean;
      space: ThemeUnit;
      spaceN: ThemeMultiplier;
      hues: AppThemeHues;
      colors: AppThemeColors;
      fontFamilies: {
          title: string;
          body: string;
          cta: string;
          input: string;
          code: string;
      };
      typography: {
          title: ThemeStyle;
          body: ThemeStyle;
          cta: ThemeStyle;
          input: ThemeStyle;
          code: ThemeStyle;
      };
      transitions: {
          duration: ThemeUnit;
          durationN: ThemeMultiplier;
      };
  }
  const APP_THEME_STRUCTURE_PALETTE: ThemeCreatorStructure;
  const APP_THEME_STRUCTURE: ThemeCreatorStructure;
  interface CreateAppThemeProps<AppThemeSettingsExt extends AppThemeSettings = AppThemeSettings> {
      structure?: ThemeCreatorStructure;
      settings?: PartialDeep<AppThemeSettingsExt>;
  }
  const createAppThemePalette: (hue: number) => AppThemeSettingsPalette;
  const createAppTheme: <AppThemeSettingsExt extends AppThemeSettings = AppThemeSettings, AppThemeExt extends AppTheme = AppTheme>(props?: CreateAppThemeProps<AppThemeSettingsExt>) => AppThemeExt;
  export type { AppThemeSettingsColors, AppThemeSettingsPalette, AppThemeSettingsHues, AppThemeSettings, AppThemePalette, AppThemeColors, AppThemeHues, AppTheme, CreateAppThemeProps };
  export { APP_THEME_STRUCTURE_PALETTE, APP_THEME_STRUCTURE, createAppThemePalette, createAppTheme };

}
declare module '@arwes/theme/createAppTheme/deepExtend' {
  function deepExtend(target?: any, extension?: any): any;
  export { deepExtend };

}
declare module '@arwes/theme/createAppTheme/index' {
  export * from '@arwes/theme/createAppTheme/createAppTheme';

}
declare module '@arwes/theme/createCreateTheme/createCreateTheme' {
  import type { ThemeCreatorStructure, ThemeCreator } from '@arwes/theme/types';
  const createCreateTheme: <ThemeSettings, Theme>(themeStructure: ThemeCreatorStructure, themeSettingsDefaults: ThemeSettings) => ThemeCreator<ThemeSettings, Theme>;
  export { createCreateTheme };

}
declare module '@arwes/theme/createCreateTheme/index' {
  export { createCreateTheme } from '@arwes/theme/createCreateTheme/createCreateTheme';

}
declare module '@arwes/theme/createThemeBreakpoints/createThemeBreakpoints' {
  import type { ThemeSettingsBreakpoints, ThemeBreakpoints } from '@arwes/theme/types';
  const createThemeBreakpoints: (settings?: ThemeSettingsBreakpoints) => ThemeBreakpoints;
  export { createThemeBreakpoints };

}
declare module '@arwes/theme/createThemeBreakpoints/index' {
  export { createThemeBreakpoints } from '@arwes/theme/createThemeBreakpoints/createThemeBreakpoints';

}
declare module '@arwes/theme/createThemeColor/createThemeColor' {
  import type { ThemeSettingsColor, ThemeColor } from '@arwes/theme/types';
  const createThemeColor: (settings: ThemeSettingsColor) => ThemeColor;
  export { createThemeColor };

}
declare module '@arwes/theme/createThemeColor/index' {
  export { createThemeColor } from '@arwes/theme/createThemeColor/createThemeColor';

}
declare module '@arwes/theme/createThemeMultiplier/createThemeMultiplier' {
  import type { ThemeSettingsMultiplier } from '@arwes/theme/types';
  const createThemeMultiplier: (settings: ThemeSettingsMultiplier) => (index: number) => number;
  export { createThemeMultiplier };

}
declare module '@arwes/theme/createThemeMultiplier/index' {
  export { createThemeMultiplier } from '@arwes/theme/createThemeMultiplier/createThemeMultiplier';

}
declare module '@arwes/theme/createThemeStyle/createThemeStyle' {
  import type { ThemeSettingsStyle, ThemeStyleValue } from '@arwes/theme/types';
  const createThemeStyle: (series: ThemeSettingsStyle) => (indexProvided: number) => ThemeStyleValue;
  export { createThemeStyle };

}
declare module '@arwes/theme/createThemeStyle/index' {
  export { createThemeStyle } from '@arwes/theme/createThemeStyle/createThemeStyle';

}
declare module '@arwes/theme/createThemeUnit/createThemeUnit' {
  import type { ThemeSettingsUnit, ThemeUnit } from '@arwes/theme/types';
  const createThemeUnit: (settings: ThemeSettingsUnit) => ThemeUnit;
  export { createThemeUnit };

}
declare module '@arwes/theme/createThemeUnit/index' {
  export * from '@arwes/theme/createThemeUnit/createThemeUnit';

}
declare module '@arwes/theme/index' {
  export * from '@arwes/theme/types';
  export * from '@arwes/theme/createThemeMultiplier/index';
  export * from '@arwes/theme/createThemeUnit/index';
  export * from '@arwes/theme/createThemeColor/index';
  export * from '@arwes/theme/createThemeStyle/index';
  export * from '@arwes/theme/createThemeBreakpoints/index';
  export * from '@arwes/theme/createCreateTheme/index';
  export * from '@arwes/theme/createAppTheme/index';

}
declare module '@arwes/theme/types' {
  import type { Properties as CSSProperties } from 'csstype';
  import type { PartialDeep } from '@arwes/tools';
  export type ThemeSettingsMultiplierFunction = (index: number) => number;
  export type ThemeSettingsMultiplier = number | number[] | ThemeSettingsMultiplierFunction;
  export type ThemeSettingsUnitFunction = (index: number) => string;
  export type ThemeSettingsUnit = string[] | ThemeSettingsUnitFunction;
  export type ThemeSettingsColor = Array<[number, number, number, number?] | string> | ((index: number) => [number, number, number, number?] | string);
  export type ThemeSettingsStyle = ThemeStyleValue[];
  export interface ThemeSettingsBreakpointsKeyListItem {
      key: string;
      value: string;
  }
  export type ThemeSettingsBreakpoints = string[] | ThemeSettingsBreakpointsKeyListItem[];
  export type ThemeMultiplier = (index: number) => number;
  export type ThemeUnit = (index: number | string | Array<number | string>) => string;
  export interface ThemeColorOptions {
      alpha?: number;
  }
  export type ThemeColor = (index: number, options?: ThemeColorOptions) => string;
  export type ThemeStyleValue = CSSProperties;
  export type ThemeStyle = (index: number) => ThemeStyleValue;
  export interface ThemeBreakpoints {
      settings: ThemeSettingsBreakpoints;
      up: (key: string | number, opts?: {
          strip?: boolean;
      }) => string;
      down: (key: string | number, opts?: {
          strip?: boolean;
      }) => string;
      between: (startKey: string | number, endKey: string | number, opts?: {
          strip?: boolean;
      }) => string;
  }
  export interface ThemeCreatorStructure {
      [key: string]: 'multiplier' | 'unit' | 'color' | 'style' | 'breakpoints' | 'other' | ThemeCreatorStructure;
  }
  export interface ThemeCreatorOptions {
      getCacheColorScheme: () => string | null | undefined;
      setCacheColorScheme: (colorScheme: string) => void;
  }
  export type ThemeCreator<ThemeSettings, Theme> = (themeSettingsExtensions?: PartialDeep<ThemeSettings> | Array<PartialDeep<ThemeSettings> | undefined> | undefined) => Theme;

}

declare module '@arwes/theme' {
  import main = require('@arwes/theme/index');
  export = main;
}
