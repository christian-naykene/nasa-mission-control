import { createCreateTheme } from "../createCreateTheme/index.js";
import { deepExtend } from "./deepExtend.js";
// THEME STRUCTURE
const APP_THEME_STRUCTURE_PALETTE = {
    main: 'color',
    text: 'color',
    deco: 'color',
    bg: 'color',
    ol: 'color'
};
const APP_THEME_STRUCTURE = {
    dark: 'other',
    space: 'unit',
    spaceN: 'multiplier',
    hues: {
        primary: 'other',
        secondary: 'other',
        success: 'other',
        info: 'other',
        warning: 'other',
        error: 'other'
    },
    colors: {
        primary: APP_THEME_STRUCTURE_PALETTE,
        secondary: APP_THEME_STRUCTURE_PALETTE,
        success: APP_THEME_STRUCTURE_PALETTE,
        info: APP_THEME_STRUCTURE_PALETTE,
        warning: APP_THEME_STRUCTURE_PALETTE,
        error: APP_THEME_STRUCTURE_PALETTE
    },
    fontFamilies: {
        title: 'other',
        body: 'other',
        cta: 'other',
        input: 'other',
        code: 'other'
    },
    typography: {
        title: 'style',
        body: 'style',
        cta: 'style',
        input: 'style',
        code: 'style'
    },
    transitions: {
        duration: 'unit',
        durationN: 'multiplier'
    }
};
const createAppThemePalette = (hue) => ({
    // Darkening colors.
    main: (i) => [hue, 80 + i, 92.5 - i * 9.44],
    text: (i) => [hue, 10, 92.5 - i * 9.44],
    // Lightening colors.
    bg: (i) => [hue, 10, 2 + i * 2],
    ol: (i) => [hue, 80 + 1, 2 + i * 2],
    deco: (i) => [hue, 80 + 1, 50, 0.025 + i * 0.025]
});
const createAppTheme = (props = {}) => {
    var _a, _b, _c, _d;
    const dark = ((_a = props.settings) === null || _a === void 0 ? void 0 : _a.dark) === undefined ? true : !!((_b = props.settings) === null || _b === void 0 ? void 0 : _b.dark);
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    const hues = {
        primary: 200,
        secondary: 80,
        success: 120,
        info: 220,
        warning: 40,
        error: 0,
        ...(_c = props.settings) === null || _c === void 0 ? void 0 : _c.hues
    };
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    const fontFamilies = {
        title: '"Segoe UI Web (West European)","Segoe UI",-apple-system,BlinkMacSystemFont,Roboto,"Helvetica Neue",sans-serif',
        body: '"Segoe UI Web (West European)","Segoe UI",-apple-system,BlinkMacSystemFont,Roboto,"Helvetica Neue",sans-serif',
        cta: '"Segoe UI Web (West European)","Segoe UI",-apple-system,BlinkMacSystemFont,Roboto,"Helvetica Neue",sans-serif',
        input: '"Segoe UI Web (West European)","Segoe UI",-apple-system,BlinkMacSystemFont,Roboto,"Helvetica Neue",sans-serif',
        code: 'JetBrains Mono,Menlo,Monaco,Consolas,Courier New,monospace',
        ...(_d = props.settings) === null || _d === void 0 ? void 0 : _d.fontFamilies
    };
    const appThemeSettingsBase = {
        dark,
        space: index => `${index * 0.25}rem`,
        spaceN: index => index * 4,
        hues,
        colors: {
            primary: createAppThemePalette(hues.primary),
            secondary: createAppThemePalette(hues.secondary),
            success: createAppThemePalette(hues.success),
            info: createAppThemePalette(hues.info),
            warning: createAppThemePalette(hues.warning),
            error: createAppThemePalette(hues.error)
        },
        fontFamilies,
        typography: {
            title: [
                { fontFamily: fontFamilies.title, fontWeight: '600', fontSize: '1.75rem' },
                { fontFamily: fontFamilies.title, fontWeight: '600', fontSize: '1.625rem' },
                { fontFamily: fontFamilies.title, fontWeight: '600', fontSize: '1.5rem' },
                { fontFamily: fontFamilies.title, fontWeight: '600', fontSize: '1.375rem' },
                { fontFamily: fontFamilies.title, fontWeight: '600', fontSize: '1.25rem' },
                { fontFamily: fontFamilies.title, fontWeight: '600', fontSize: '1.125rem' }
            ],
            body: [
                { fontFamily: fontFamilies.body, fontWeight: '400', fontSize: '1.125rem' },
                { fontFamily: fontFamilies.body, fontWeight: '400', fontSize: '1rem' },
                { fontFamily: fontFamilies.body, fontWeight: '400', fontSize: '0.875rem' }
            ],
            cta: [
                { fontFamily: fontFamilies.cta, fontWeight: '500', fontSize: '1rem', textTransform: 'uppercase' },
                { fontFamily: fontFamilies.cta, fontWeight: '500', fontSize: '0.875rem', textTransform: 'uppercase' },
                { fontFamily: fontFamilies.cta, fontWeight: '500', fontSize: '0.75rem', textTransform: 'uppercase' }
            ],
            input: [
                { fontFamily: fontFamilies.input, fontWeight: '400', fontSize: '1rem' },
                { fontFamily: fontFamilies.input, fontWeight: '400', fontSize: '0.875rem' },
                { fontFamily: fontFamilies.input, fontWeight: '400', fontSize: '0.75rem' }
            ],
            code: [
                { fontFamily: fontFamilies.code, fontWeight: '400', fontSize: '1rem' },
                { fontFamily: fontFamilies.code, fontWeight: '400', fontSize: '0.875rem' },
                { fontFamily: fontFamilies.code, fontWeight: '400', fontSize: '0.75rem' }
            ]
        },
        transitions: {
            duration: index => `${index * 0.15}s`,
            durationN: index => index * 0.15
        }
    };
    const createTheme = createCreateTheme(deepExtend(APP_THEME_STRUCTURE, props.structure), deepExtend(appThemeSettingsBase, props.settings));
    const theme = createTheme();
    return theme;
};
export { APP_THEME_STRUCTURE_PALETTE, APP_THEME_STRUCTURE, createAppThemePalette, createAppTheme };
