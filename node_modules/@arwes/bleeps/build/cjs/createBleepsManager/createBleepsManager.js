"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBleepsManager = void 0;
const tools_1 = require("@arwes/tools");
const index_1 = require("../createBleep/index");
const createBleepsManager = (props) => {
    var _a, _b;
    // In non-browser environments, the bleeps manager is still created but without
    // actual functionalities.
    const isBleepsAvailable = tools_1.IS_BROWSER && !!window.AudioContext;
    const context = isBleepsAvailable ? new window.AudioContext() : null;
    const masterGain = isBleepsAvailable ? context.createGain() : null;
    const bleeps = {};
    const bleepNames = Object.keys(props.bleeps);
    bleepNames.forEach(bleepName => {
        var _a;
        const bleepProps = props.bleeps[bleepName];
        const categoryProps = bleepProps.category
            ? (_a = props.categories) === null || _a === void 0 ? void 0 : _a[bleepProps.category]
            : null;
        const generalProps = {
            ...props.common,
            ...categoryProps
        };
        bleeps[bleepName] = generalProps.disabled
            ? null
            : (0, index_1.createBleep)({
                ...generalProps,
                ...bleepProps,
                context,
                masterGain
            });
    });
    if (isBleepsAvailable) {
        masterGain.connect(context.destination);
        // Set initial master gain value.
        const globalVolume = Math.max(0, Math.min(1, (_b = (_a = props === null || props === void 0 ? void 0 : props.master) === null || _a === void 0 ? void 0 : _a.volume) !== null && _b !== void 0 ? _b : 1));
        masterGain.gain.setValueAtTime(globalVolume, context.currentTime);
    }
    const unload = () => {
        if (!isBleepsAvailable) {
            return;
        }
        bleepNames.forEach(bleepName => {
            var _a;
            (_a = bleeps[bleepName]) === null || _a === void 0 ? void 0 : _a.unload();
        });
    };
    const update = (newProps) => {
        var _a;
        if (!isBleepsAvailable) {
            return;
        }
        // Global settings.
        if (((_a = newProps.master) === null || _a === void 0 ? void 0 : _a.volume) !== undefined) {
            const globalVolume = Math.max(0, Math.min(1, newProps.master.volume));
            masterGain.gain.setValueAtTime(globalVolume, context.currentTime);
        }
        // Bleep settings.
        bleepNames.forEach(bleepName => {
            var _a, _b, _c, _d;
            const baseBleepProps = props.bleeps[bleepName];
            const category = baseBleepProps === null || baseBleepProps === void 0 ? void 0 : baseBleepProps.category;
            const newCategoryProps = category
                ? (_a = newProps.categories) === null || _a === void 0 ? void 0 : _a[category]
                : null;
            const generalProps = {
                ...newProps.common,
                ...newCategoryProps
            };
            if (generalProps.disabled) {
                (_b = bleeps[bleepName]) === null || _b === void 0 ? void 0 : _b.unload();
                bleeps[bleepName] = null;
            }
            else {
                if (bleeps[bleepName]) {
                    (_c = bleeps[bleepName]) === null || _c === void 0 ? void 0 : _c.update({
                        ...generalProps,
                        ...(_d = newProps.bleeps) === null || _d === void 0 ? void 0 : _d[bleepName]
                    });
                }
                else {
                    bleeps[bleepName] = (0, index_1.createBleep)({
                        ...generalProps,
                        ...baseBleepProps,
                        context,
                        masterGain
                    });
                }
            }
        });
    };
    return Object.freeze({ bleeps, unload, update });
};
exports.createBleepsManager = createBleepsManager;
