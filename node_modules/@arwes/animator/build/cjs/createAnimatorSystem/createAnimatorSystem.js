"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAnimatorSystem = void 0;
const tools_1 = require("@arwes/tools");
const index_1 = require("../internal/createAnimatorMachine/index");
const index_2 = require("../internal/createAnimatorManager/index");
const createAnimatorSystem = () => {
    const systemId = `s${Math.random()}`.replace('.', '');
    let nodeIdCounter = 0;
    let root;
    const createNode = (parent, control) => {
        const nodeId = `${systemId}-n${nodeIdCounter++}`;
        // The node object reference is passed around in multiple places with some
        // circular references, so this is an object base and later is modified
        // with specific readonly and writable properties.
        const node = { id: nodeId };
        const settings = control.getSettings();
        const machine = (0, index_1.createAnimatorMachine)(node, settings.initialState);
        const manager = (0, index_2.createAnimatorManager)(node, settings.manager);
        const nodeProps = {
            id: {
                value: nodeId,
                enumerable: true
            },
            control: {
                value: control,
                enumerable: true
            },
            parent: {
                value: parent,
                enumerable: true
            },
            children: {
                value: new Set(),
                enumerable: true
            },
            subscribers: {
                value: new Set(),
                enumerable: true
            },
            scheduler: {
                value: (0, tools_1.createTOScheduler)(),
                enumerable: true
            },
            duration: {
                get: () => {
                    const { duration, combine } = node.control.getSettings();
                    const enter = combine
                        ? node.manager.getDurationEnter(Array.from(node.children))
                        : duration.enter || 0;
                    const exit = duration.exit || 0;
                    return { enter, exit };
                },
                enumerable: true
            },
            state: {
                get: () => machine.getState(),
                enumerable: true
            },
            subscribe: {
                value: (subscriber) => {
                    node.subscribers.add(subscriber);
                    subscriber(node);
                    return () => node.subscribers.delete(subscriber);
                },
                enumerable: true
            },
            unsubscribe: {
                value: (subscriber) => {
                    node.subscribers.delete(subscriber);
                },
                enumerable: true
            },
            send: {
                value: machine.send,
                enumerable: true
            },
            manager: {
                value: manager,
                enumerable: true,
                writable: true
            }
        };
        Object.defineProperties(node, nodeProps);
        if (parent) {
            parent.children.add(node);
        }
        return node;
    };
    const removeNode = (node) => {
        node.scheduler.stopAll();
        for (const child of node.children) {
            removeNode(child);
        }
        if (node.parent) {
            node.parent.children.delete(node);
        }
        node.children.clear();
        node.subscribers.clear();
    };
    const register = (parentNode, control) => {
        if (parentNode === undefined || parentNode === null) {
            if (root) {
                throw new Error('The root node must be unregistered before registering another root node.');
            }
            root = createNode(undefined, control);
            return root;
        }
        if (!root) {
            throw new Error('A root node needs to be registered first in the system before registering children nodes.');
        }
        return createNode(parentNode, control);
    };
    const unregister = (node) => {
        if (!root) {
            return;
        }
        removeNode(node);
        if (root.id === node.id) {
            root = undefined;
        }
    };
    // System object reference so it can have dynamic object properties setup later.
    const system = {};
    const systemProps = {
        id: {
            value: systemId,
            enumerable: true
        },
        root: {
            get: () => root,
            enumerable: true
        },
        register: {
            value: register,
            enumerable: true
        },
        unregister: {
            value: unregister,
            enumerable: true
        }
    };
    Object.defineProperties(system, systemProps);
    return system;
};
exports.createAnimatorSystem = createAnimatorSystem;
