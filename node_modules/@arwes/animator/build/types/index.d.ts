declare module '@arwes/animator/constants' {
  import type { AnimatorState, AnimatorAction, AnimatorManagerName, AnimatorDuration, AnimatorSettings } from '@arwes/animator/types';
  export const ANIMATOR_STATES: {
      [P in AnimatorState]: P;
  };
  export const ANIMATOR_ACTIONS: {
      [P in AnimatorAction]: P;
  };
  export const ANIMATOR_MANAGER_NAMES: {
      [P in AnimatorManagerName]: P;
  };
  export const ANIMATOR_DEFAULT_DURATION: AnimatorDuration;
  export const ANIMATOR_DEFAULT_SETTINGS: AnimatorSettings;

}
declare module '@arwes/animator/createAnimatorSystem/createAnimatorSystem' {
  import type { AnimatorSystem } from '@arwes/animator/types';
  const createAnimatorSystem: () => AnimatorSystem;
  export { createAnimatorSystem };

}
declare module '@arwes/animator/createAnimatorSystem/index' {
  export * from '@arwes/animator/createAnimatorSystem/createAnimatorSystem';

}
declare module '@arwes/animator/index' {
  export * from '@arwes/animator/types';
  export * from '@arwes/animator/constants';
  export * from '@arwes/animator/createAnimatorSystem/index';

}
declare module '@arwes/animator/internal/createAnimatorMachine/createAnimatorMachine' {
  import type { AnimatorNode, AnimatorState, AnimatorAction } from '@arwes/animator/types';
  interface AnimatorMachine {
      getState: () => AnimatorState;
      send: (action: AnimatorAction) => void;
  }
  const createAnimatorMachine: (node: AnimatorNode, initialState: AnimatorState) => AnimatorMachine;
  export { createAnimatorMachine };

}
declare module '@arwes/animator/internal/createAnimatorMachine/index' {
  export * from '@arwes/animator/internal/createAnimatorMachine/createAnimatorMachine';

}
declare module '@arwes/animator/internal/createAnimatorManager/createAnimatorManager' {
  import type { AnimatorManagerName, AnimatorManager, AnimatorNode } from '@arwes/animator/types';
  const createAnimatorManager: (node: AnimatorNode, manager: AnimatorManagerName) => AnimatorManager;
  export { createAnimatorManager };

}
declare module '@arwes/animator/internal/createAnimatorManager/index' {
  export * from '@arwes/animator/internal/createAnimatorManager/createAnimatorManager';

}
declare module '@arwes/animator/types' {
  import type { TOScheduler } from '@arwes/tools';
  export interface AnimatorControl {
      readonly getSettings: () => AnimatorSettings;
      readonly setDynamicSettings: (settings: AnimatorSettingsPartial | null) => void;
      readonly getDynamicSettings: () => AnimatorSettingsPartial | null;
      readonly setForeignRef: (ref: unknown) => void;
      readonly getForeignRef: () => unknown;
  }
  export type AnimatorState = 'entered' | 'entering' | 'exiting' | 'exited';
  export type AnimatorAction = 'setup' | 'enter' | 'enterEnd' | 'exit' | 'exitEnd' | 'update' | 'refresh';
  export type AnimatorManagerName = 'parallel' | 'stagger' | 'staggerReverse' | 'sequence' | 'sequenceReverse' | 'switch';
  export type AnimatorSubscriber = (node: AnimatorNode) => void;
  export interface AnimatorManager {
      readonly name: AnimatorManagerName;
      readonly getDurationEnter: (childrenNodes?: AnimatorNode[]) => number;
      readonly enterChildren: (childrenNodes?: AnimatorNode[]) => void;
      readonly destroy?: () => void;
  }
  export interface AnimatorNode {
      readonly id: string;
      readonly control: AnimatorControl;
      readonly parent?: AnimatorNode;
      readonly children: Set<AnimatorNode>;
      readonly subscribers: Set<AnimatorSubscriber>;
      readonly scheduler: TOScheduler;
      readonly duration: {
          enter: number;
          exit: number;
      };
      readonly state: AnimatorState;
      readonly subscribe: (subscriber: AnimatorSubscriber) => (() => void);
      readonly unsubscribe: (subscriber: AnimatorSubscriber) => void;
      readonly send: (newAction: AnimatorAction) => void;
      manager: AnimatorManager;
  }
  export interface AnimatorSystem {
      readonly id: string;
      readonly root: AnimatorNode | null;
      readonly register: (parentNode: AnimatorNode | undefined | null, control: AnimatorControl) => AnimatorNode;
      readonly unregister: (node: AnimatorNode) => void;
  }
  export interface AnimatorDuration {
      enter: number;
      exit: number;
      delay: number;
      offset: number;
      stagger: number;
      [duration: string]: number;
  }
  export interface AnimatorSettings {
      active: boolean;
      duration: AnimatorDuration;
      manager: AnimatorManagerName;
      merge: boolean;
      combine: boolean;
      initialState: 'exited' | 'entered';
      condition?: (node: AnimatorNode) => boolean;
      onTransition?: (node: AnimatorNode) => void;
  }
  export type AnimatorSettingsPartial = Partial<Omit<AnimatorSettings, 'duration'>> & {
      duration?: Partial<AnimatorDuration>;
  };
  export interface AnimatorInterface {
      readonly system: AnimatorSystem;
      readonly node: AnimatorNode;
  }

}

declare module '@arwes/animator' {
  import main = require('@arwes/animator/index');
  export = main;
}
